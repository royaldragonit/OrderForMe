// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

#nullable disable

namespace OrderForMeProject.Models.Entities
{
    public partial class OrderformeContext : DbContext
    {
        private readonly IConfiguration _config;
        public OrderformeContext()
        {
            _config = new ConfigurationBuilder().SetBasePath(Path.Combine(Directory.GetCurrentDirectory()))
                 .AddJsonFile("appsettings.json", optional: false)
                .Build();
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            string conn = _config.GetConnectionString("DefaultConnection");

            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(conn);
            }
        }

        public OrderformeContext(DbContextOptions<OrderformeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<GroupProduct> GroupProduct { get; set; }
        public virtual DbSet<LinkProduct> LinkProduct { get; set; }
        public virtual DbSet<Logger> Logger { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<SiteBuy> SiteBuy { get; set; }
        public virtual DbSet<SourceBuy> SourceBuy { get; set; }
        public virtual DbSet<StateOrder> StateOrder { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VListOrder> VListOrder { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<GroupProduct>(entity =>
            {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<LinkProduct>(entity =>
            {
                entity.Property(e => e.Link)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Price).HasDefaultValueSql("((1))");

                entity.Property(e => e.Quantity).HasDefaultValueSql("((1))");

                entity.Property(e => e.RateUsdtoVnd)
                    .HasColumnName("RateUSDToVND")
                    .HasDefaultValueSql("((24000))");

                entity.HasOne(d => d.Orders)
                    .WithMany(p => p.LinkProduct)
                    .HasForeignKey(d => d.OrdersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__LinkProdu__Order__29221CFB");
            });

            modelBuilder.Entity<Logger>(entity =>
            {
                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsAccept)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Users)
                    .WithMany(p => p.Logger)
                    .HasForeignKey(d => d.UsersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Logger_Users");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.Property(e => e.Address1).HasMaxLength(500);

                entity.Property(e => e.Address2).HasMaxLength(500);

                entity.Property(e => e.City).HasMaxLength(200);

                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'Customer')");

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DateBuy).HasColumnType("date");

                entity.Property(e => e.FeeShippingToVn).HasColumnName("FeeShippingToVN");

                entity.Property(e => e.FirstName).HasMaxLength(200);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsShippingToVn).HasColumnName("IsShippingToVN");

                entity.Property(e => e.LastName).HasMaxLength(200);

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PhoneNumber).HasMaxLength(22);

                entity.Property(e => e.RateUsdvnd).HasColumnName("RateUSDvnd");

                entity.Property(e => e.State).HasMaxLength(200);

                entity.Property(e => e.ZipCode).HasMaxLength(20);

                entity.HasOne(d => d.GroupProduct)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.GroupProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_GroupProduct");

                entity.HasOne(d => d.SiteBuy)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.SiteBuyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_SiteBuy");

                entity.HasOne(d => d.SourceBuy)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.SourceBuyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_SourceBuy");

                entity.HasOne(d => d.StateOrder)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.StateOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_StateOrder");

                entity.HasOne(d => d.Users)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.UsersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Users");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.FeeShippingToVn).HasColumnName("FeeShippingToVN");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<SiteBuy>(entity =>
            {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RateUsdtoVnd)
                    .HasColumnName("RateUSDToVND")
                    .HasDefaultValueSql("((24000))");
            });

            modelBuilder.Entity<SourceBuy>(entity =>
            {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<StateOrder>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(300);

                entity.Property(e => e.Address1).HasMaxLength(500);

                entity.Property(e => e.Address2).HasMaxLength(500);

                entity.Property(e => e.City).HasMaxLength(200);

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName).HasMaxLength(200);

                entity.Property(e => e.Fullname)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastName).HasMaxLength(200);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber).HasMaxLength(22);

                entity.Property(e => e.RoleId).HasDefaultValueSql("((3))");

                entity.Property(e => e.State).HasMaxLength(200);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode).HasMaxLength(20);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Role");
            });

            modelBuilder.Entity<VListOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vListOrder");

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Fullname)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.GroupProductName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RateUsdtoVnd).HasColumnName("RateUSDToVND");

                entity.Property(e => e.StateName).HasMaxLength(200);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}